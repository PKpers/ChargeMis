import ROOT
import numpy as np

def getPtEtaPhiCharge(event):
    '''
    Takes a dilepton event as an input 
    Returns a list of the Pts etas and phis 
    of the two leptons
    Returns the invariant mass of the pair.
    '''
    lepton0 = ROOT.TLorentzVector()
    lepton1 = ROOT.TLorentzVector()
    
    Pt = event.LightLepton_Pt
    Eta = event.LightLepton_Eta
    Phi = event.LightLepton_Phi
    Charge = event.LightLepton_Charge
    
        
    PtEtaPhiCharge = [
        Pt[0], Eta[0], Phi[0], Charge[0],
        Pt[1], Eta[1], Phi[1], Charge[1]
    ]
    
    lepton0.SetPtEtaPhiM(Pt[0], Eta[0], Phi[0], 0)
    lepton1.SetPtEtaPhiM(Pt[1], Eta[1], Phi[1], 0)

    dilepton_pair = lepton0 + lepton1
    dileptonMass = dilepton_pair.M()
    return PtEtaPhiCharge, dileptonMass

inDir = "/cms/multilepton-4/jvora/ULnano/Skims/05Apr23/MC/2LOS_Skim_medium_2018/"
inFileName="Snapshot_DY_1of8.root";#read the root file
inFile = inDir + inFileName
treeName="skimTree"
RFile = ROOT.TFile.Open(inFile)
tree=RFile.Get(treeName)

diMuonEvent = ROOT.RVec[int]([2,2])
diElectronEvent = ROOT.RVec[int]([1, 1])

muons = list()
electrons = list()

muon_mass_hist = ROOT.TH1D("muon_mass_hist", "", 50,0, 1000) 
electron_mass_hist = ROOT.TH1D("electron_mass_hist", "", 50,0, 1000) 
k = 0
for entry in tree:
    if k ==10: break
    dilepton = entry.LightLepton_Flavor
    coords, mass = getPtEtaPhiCharge(entry)
    
    if dilepton == diMuonEvent :
        muons.append(coords)
        muon_mass_hist.Fill(mass)
        
    elif dilepton == diElectronEvent:
        electrons.append(coords)
        electron_mass_hist.Fill(mass)
        
    else: continue
    k += 1
#

muon_mass_hist.SetDirectory(0)
electron_mass_hist.SetDirectory(0)
RFile.Close()
## Write the outputs -------------------------------------------------------------------------------------
# Write the histogram
outFileName = "DY_1of8"
#
#outFilePath = '/home/kpapad/UG_thesis/Thesis/Analysis/out/Data/' 

#Writing the dimuon invariant mass histogram to a root file 
outHistMuons = ROOT.TFile.Open(outFileName+'_MuonsHist.root' ,"RECREATE")
outHistMuons.cd()
print('Writing {} to {}'.format('dimuon mass hist', outFileName+'_MuonsHist.root'))
muon_mass_hist.Write()
outHistMuons.Close()
#

#Writing the dielectron invariant mass histogram to a root file 
outHistElectrons = ROOT.TFile.Open(outFileName+'_ElectronsHist.root' ,"RECREATE")
outHistElectrons.cd()
print('Writing {} to {}'.format('dielectron mass hist', outFileName+'_ElectronsHist.root'))
electron_mass_hist.Write()
outHistElectrons.Close()
exit()
# Write the momenta and energy of the dilepton events to a root file
tree_name = 'myTree'
myTree = ROOT.TTree(treeName, treeName)
num_branches= len(muons[0])
#
bn= [
    ['Pt'+str(i), 'Eta'+str(i), 'Phi'+str(i), 'Energy'+str(i)]
    for i in (1,2)
]
branchName= bn[0]+bn[1]
print('Writing {} to {} at {}'.format(branchName, tree_name, outFilePath+outFileName+'Data.root'))

#branches_vecs = [
#   ROOT.vector("float")(0) for n in range(num_branches)
#]#the values of those will be stored to branches
muons = np.array(muons, dtype=np.float32).T # from [[event 1], [event2], ...] to [[px], [py], ...]]
branches = define_columns(num_branches, branchName, muons)

df = ROOT.RDF.MakeNumpyDataFrame(branches)\
             .Snapshot('tree', outFilePath+outFileName+'Data.root')


